







import {
    HTTP_INTERCEPTORS,
    HttpEvent,
    HttpErrorResponse,
} from '@angular/common/http';

import { Injectable } from '@angular/core';

import {
    HttpInterceptor,
    HttpHandler,
    HttpRequest,
} from '@angular/common/http';

import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { catchError, filter, switchMap, take } from 'rxjs/operators';
import { AuthServiceService } from '../services/auth-service.service';
import { TokenServiceService } from '../services/token-service.service';

const TOKEN_HEADER_KEY = 'Authorization'; 

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
    private isRefreshing = false;
    private refreshTokenSubject: BehaviorSubject&lt;any&gt; = new BehaviorSubject&lt;any&gt;(
        null
    );
    constructor(
        private tokenService: TokenServiceService,
        private authService: AuthServiceService
    ) { }
    intercept(
        req: HttpRequest&lt;any&gt;,
        next: HttpHandler
    ): Observable&lt;HttpEvent&lt;Object&gt;&gt; {
        let authReq = req;
        const token = this.tokenService.getToken();
        if (token != null) {
            authReq = this.addTokenHeader(req, token);
        }
        return next.handle(authReq).pipe(
            catchError((error) =&gt; {
                //console.log(error);
               // console.log(error.error.message);
                if (
                    error instanceof HttpErrorResponse &&
                    //!authReq.url.includes('authorization-service/login') &&
                    //error.status === 403
                    error.error.message == "Invalid token"
                ) {
                    alert("Session TimeOut. Login Agian!");
                    this.logout();
                    window.location.href = '/login';
                    return throwError(error);
                    // this.handle401Error(authReq, next);
                }
                return throwError(error);
            })
        );
    }
    
    private addTokenHeader(request: HttpRequest&lt;any&gt;, token: string) {
        /* for Spring Boot back-end */
        return request.clone({
            headers: request.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token),
        });
    }

    logout(): void {
        this.tokenService.signOut();
        window.location.reload();
    }
}

export const authInterceptorProviders = [
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
];